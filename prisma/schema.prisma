// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           String         @id @default(uuid())
  username     String         @unique
  password     String
  email        String         @unique
  token        String?        @unique @db.VarChar(500)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userDetails  userDetails?
  wishlist     wishlist[]
  userInGroup  userInGroup[]
  purchase     purchase[]
  notification notification[]
}

model userDetails {
  id            String      @id @default(uuid())
  firstName     String
  lastName      String
  phone         String
  dob           DateTime
  avatar        String?     @db.VarChar(500)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          user        @relation(fields: [userId], references: [id])
  userId        String      @unique
  userAddress   userAddress @relation(fields: [userAddressId], references: [id])
  userAddressId String      @unique
}

model userAddress {
  id              String       @id @default(uuid())
  city            String
  country         String
  completeAddress String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  userDetails     userDetails?
}

model wishlist {
  id            String          @id @default(uuid())
  name          String          @unique
  isBought      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  owner         user            @relation(fields: [ownerId], references: [id])
  ownerId       String
  itemWishlist  itemWishlist[]
  groupWishlist groupWishlist[]
}

model itemWishlist {
  id         String     @id @default(uuid())
  isBought   Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  wishlist   wishlist   @relation(fields: [wishlistId], references: [id])
  wishlistId String
  item       item       @relation(fields: [itemId], references: [id])
  itemId     String
  purchase   purchase[]

  @@unique([wishlistId, itemId])
}

model item {
  id           String         @id @default(uuid())
  name         String
  details      String
  link         String         @db.VarChar(350)
  size         String?
  quantity     Int            @default(1)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  itemWishlist itemWishlist[]
}

model groupsOfUsers {
  id            String          @id @default(uuid())
  name          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userInGroup   userInGroup[]
  groupWishlist groupWishlist[]
}

model userInGroup {
  id        String        @id @default(uuid())
  isOwner   Boolean
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      user          @relation(fields: [userId], references: [id])
  userId    String
  group     groupsOfUsers @relation(fields: [groupId], references: [id])
  groupId   String
}

model groupWishlist {
  id         String        @id @default(uuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  group      groupsOfUsers @relation(fields: [groupId], references: [id])
  groupId    String
  wishlist   wishlist      @relation(fields: [wishlistId], references: [id])
  wishlistId String
}

model purchase {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           user         @relation(fields: [userId], references: [id])
  userId         String
  itemWishlist   itemWishlist @relation(fields: [itemWishlistId], references: [id])
  itemWishlistId String
}

model notification {
  id        String   @id @default(uuid())
  category  Category
  details   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id])
  userId    String
}

enum Category {
  GROUP
  GIFT
  EVENT
}
